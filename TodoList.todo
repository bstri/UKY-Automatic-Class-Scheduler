Summary:
	☐	Graphical or text-based configuration input
	☐	Obtain up-to-date classes for specified semester and desired courses
	☐	Calculating desirable schedules based on classes and configuration
	☐	Saving results and/or graphical output
	
Control Flow:
	Main handles the flow of the entire program, and so it should start by making the course input gui
	Course Input Gui module:
		☐	Term (Fall/Spring + year) dropdown/input controls at top
		☐	Column headings: course prefix, course #, section # (optional)
		Course input format
			☐	A textbox under each column, then an Enter button in the 4th column
				☐	Autocomplete course prefix 
					☐	Locate data on all the course prefixes, scrape it, and cache it
				☐	Tab cycling between textboxes
				☐	'Enter' key submits
			☐	On submission, loading icon appears to the left
				Website Interface:
					✔	Fetches info about a given class from the course catalog @done (18-05-27 21:13)
					✔	Contains cache of fetched course info @done (18-05-27 21:13)
			☐	When data has arrived, turn the textboxes into labels, add an expandable arrow button, and an X button to remove the course
			☐	On expansion, show all the sections, column headers: Meeting Type, Profesor, Days, Time
				☐	A checkbox, selecting/deselecting the section for schedule consideration
				☐	Full course name e.g. MA322-1
				☐	Rows for each meeting type (lab, lecture, etc.)
					☐	Warnings button in the last column
		Mandatory Course Block
			☐	Visual block of courses the user can add to
			☐	Somewhere, the text "Use all course(s) from this list"
		☐ Optional Course Block -- "Use any course(s) from this list"
		☐	Add Custom Block button
			☐	User specifies count "Use __ course(s) from this list" dropdown that starts blank and goes from 1-#courses in custom block
			☐	Mandatory checkbox
		☐	"Find schedules with __ - __ credits"
		☐	Return list of course blocks and credit range to Main
	Scheduler:
		Input: List of course blocks and credit range
		☐	Support courses with sections that have differing credit amounts
			> Treat each section as a different course since multiple registration seems likely for this kind of class
		✔	Generate schedules @done (18-05-27 23:17)
	Schedule Viewer Gui:
		Input: List of schedules
		☐	Ignore schedules starting at (checkboxes): 8am, 9am, 9:30, 10, 11, ...
		☐	Ignore schedules ending at 8pm, 7pm, 6pm, ...
			> Ideally would show just the times that appear in the schedules, but sometimes there can be quite a few schedules
		☐	Showing schedules with (checkboxes for each credit number in the credit range)
		☐	"Showing 100 of [# schedules found] schedules found"
			> Don't sort the schedules, because they come in the order that the user input the classes
		☐	Column headers: #Credits, Start Time, End Time
		☐	Mousing over a schedule will create a schedule visualization on the right; clicking expands the visualization
			☐	Shows 8am - 8pm as row headers, M-F as column headers
			☐	Shows each class meeting, the size of each determined by the time span of the meeting; content is the full class name and the meeting type

Questions:
	☐	Should the different features (ex "Meal Break") be priorities (that can be stretched or broken) or limits (that may prevent schedules from being found at all)? If priorities, how should they be stretched/broken?
		> One option is that the user can configure a list of priorities where the highest priorities are broken last; the user can also specify the same type of requirement multiple times (ex lowest priority might be "Meal break of 2 hours in duration", but highest priority might be "Meal break of 20 minutes in duration"). These conditions could also "Maximize"/"Minimize" something, ex "Maximize meal break".
	✔	Scraping concern: should information fetching be spread out over a certain amount of time (ex a few seconds between requests)? @done (18-05-15 23:33)
		+ Due to low # of overall requests and information involved, just wait for one to finish before going on to the next
	☐	How frequently might course information change? We should cache the information so we don't have to fetch the same information repeatedly every time the user changes the input even slightly, but how long should the information remain cached?
		✔	Can we ask the server for a "last modified date" without getting all the other information back? > NO @done (18-05-15 23:39)
		1. Save cache for up to 12 hours with refresh button to override
		2. Save cache for up to a month, but also attempt to update it if the user requests schedules and it's been more than 30 minutes -- if an "estimated time left" for all requests to finish is more than a few seconds AND there is no information not available in the cache AND any information already downloaded didn't change compared to what was already in the cache, show the user a "cancel fetching most recent information" button
	☐	Does there really need to be a HardCourseNumberMaximum?

Configuration Input:
	☐	Specify year/semester (default based on current date)
	☐	Minimum number of credits (default 12)
	☐	Maximum number of credits (default 21)
	☐	To add a course, have textboxes that let you type in department, course number, and optionally section number (for when you know exactly which section you'll need), and a checkbox to allow denoting classes as mandatory that must appear in all proposed schedules
	☐	Validate input after control-focus is lost
	☐	Allow saving/loading configurations
	> See "Nice Additional Features" for more possible options

--- ✄ -----------------------
Nice Additional Features:
	in order of priority/urgency
--- ✄ -----------------------
	
	
Prevent TBD Classes:
	Allows exclusion of classes that have TBD professor, location, or meeting times
	> Would appear as 3 checkboxes 'Allow TBD ___' all checked by default

Meal Break:
	Prioritizes schedules that accommodate lunch breaks.
	☐	Allow user to specify lunch break minimum start/end times and minimum duration

Buddy System:
	Add a friend's schedule information to see which classes you could take together
	☐	Allow exporting of results to a file (that said friend could send to the user)
	☐	Allow importing these results
	☐	Look for shared classes amongst the possibilities

Favorite Schedules:
	Allow user to star certain schedules, which become distinguished from the others
	> Could move schedule to a dedicated place on the side; allow saving favorite schedules

Automatically Exclude Classes with Closed Seats:
	Requires user to log in
	☐	Automatically check seat status and either exclude such classes or prioritize schedules that have open seats for all included classes

Maximum Consecutive Class Time:
	Avoids schedules that have more than a specified number of hours of classes in a row
	☐	Allow specification of maximum
	
No long walks:
	Allow sorting the schedule list by collective distance between all classes
	☐	Determine which building each class is in
	☐	Determine how far apart buildings are
	> Too innaccurate and subjective to try to allow time estimation, and not all that useful
		> However, when forming schedules we can exclude those schedules where making it to class on time is not possible because the classes are on opposite sides of campus (which is rare)
			
Professor Ratings:
	Scrape RateMyProfessors (website) and allow sorting schedules with the highest professor ratings

--- ✄ -----------------------
Specific Files/Systems Todos:
--- ✄ -----------------------
CourseInput:
	✔	Delete CourseInput.Parse when no longer needed (and the tests for it) @done (18-05-24 17:31)